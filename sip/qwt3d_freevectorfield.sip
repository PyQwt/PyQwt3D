// DO NOT EDIT: this file is automagically generated by FILL.
//
// The SIP interface definition for FreeVectorField.
//
// Copyright (C) 2004 Gerard Vermeulen
//
// This file is part of PyQwt3D.
//
// -- LICENSE --
//
// PyQwt3D is free software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the Free Software
// Foundation; either version 2 of the License, or (at your option) any later
// version.
//
// PyQwt3D is distributed in the hope that it will be useful, but WITHOUT ANY
// WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
// FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
// details.
//
// You should have received a copy of the GNU General Public License along
// with PyQwt3D; if not, write to the Free Software Foundation, Inc.,
// 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
//
// In addition, as a special exception, Gerard Vermeulen gives permission to
// link PyQwt3D dynamically with commercial, non-commercial or educational
// versions of Qt, PyQt and sip, and distribute PyQwt in this form, provided
// that equally powerful versions of Qt, PyQt and sip have been released under
// the terms of the GNU General Public License.
//
// If PyQwt3D is dynamically linked with commercial, non-commercial or
// educational versions of Qt, PyQt and sip, PyQwt3D becomes a free plug-in for
// a non-free program.
//
// -- LICENSE --


class FreeVectorField
{

%TypeHeaderCode
#include <qwt3d_types.h>
#include <sip_Qwt3DFreeVector.h>
using namespace Qwt3D;
%End // %TypeHeaderCode

public:
    FreeVectorField();
    FreeVectorField(size_type);
    FreeVectorField(size_type, const FreeVector &);
    FreeVectorField(const FreeVectorField &);

    size_type capacity() const;
    void clear();
    bool empty() const;
    FreeVector & back();
    FreeVector & front();
    size_type max_size() const;
    void pop_back();
    void push_back(const FreeVector &);
    void reserve(size_type);
    void resize(size_type, const FreeVector & = FreeVector());
    size_type size() const;
    void swap(FreeVectorField &);

    FreeVector & __getitem__(int);
%MethodCode
    int len = sipCpp -> size();
    
    if (0 > (a0 = sipConvertFromSequenceIndex(a0, len)))
        sipIsErr = 1;
    else
        sipRes = &(*sipCpp)[a0];
%End

    int __len__() const;
%MethodCode
    sipRes = sipCpp -> size();
%End

    void __setitem__(int, const FreeVector &);
%MethodCode
    int len = sipCpp -> size();

    if (0 > (a0 = sipConvertFromSequenceIndex(a0, len)))
        sipIsErr = 1;
    else
        (*sipCpp)[a0] = *a1;
%End

    void __setitem__(SIP_PYSLICE, const FreeVectorField &);
%MethodCode
    int len = sipCpp -> size();
    int start, stop, step, slicelength;

    if (0 > sipConvertFromSliceObject(a0, len,
                                      &start, &stop, &step, &slicelength))
        sipIsErr = 1;
    else {
        int vlen = a1 -> size();

        if (vlen != slicelength) {
            sipBadLengthForSlice(vlen, slicelength);
            sipIsErr = 1;
        } else {
            FreeVectorField::const_iterator it = a1 -> begin();

            for (int i = 0; i < slicelength; ++i) {
                (*sipCpp)[start] = *it;
                start += step;
                ++it;
            }
        }
    }
%End

}; // class FreeVectorField


// Local Variables:
// mode: C++
// c-file-style: "stroustrup"
// indent-tabs-mode: nil
// End:

